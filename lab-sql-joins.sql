use sakila;

-- Write SQL queries to perform the following tasks using the Sakila database:
-- 1. List the number of films per category.
select count(f.film_id) as total_films, cat.name as category
from film as f
left join film_category as fcat on f.film_id = fcat.film_id
left join category as cat on fcat.category_id = cat.category_id
group by cat.name
order by total_films desc ;

-- 2. Retrieve the store ID, city, and country for each store.
select s.store_id , ci.city as 'city', co.country as 'country'
from store as s
left join address as a on s.address_id = a.address_id
left join city as ci on a.city_id = ci.city_id
left join country as co on ci.country_id = co.country_id;

-- 3. Calculate the total revenue generated by each store in dollars.
select sta.store_id, sum(p.amount) as total_revenue 
from payment as p
left join staff as sta on p.staff_id = sta.staff_id
group by sta.store_id
order by total_revenue desc;

-- 4. Determine the average running time of films for each category.
select avg(f.length) as average_running_time_of_films, cat.name as category
from film as f
left join film_category as fcat on f.film_id = fcat.film_id
left join category as cat on fcat.category_id = cat.category_id
group by cat.name
order by average_running_time_of_films desc ;

-- Bonus:
-- 5. Identify the film categories with the longest average running time.
-- I already sort the result in descending order with the above code, so I copied here and limit result to the top category:
select avg(f.length) as average_running_time_of_films, cat.name as category
from film as f
left join film_category as fcat on f.film_id = fcat.film_id
left join category as cat on fcat.category_id = cat.category_id
group by cat.name
order by average_running_time_of_films desc
limit 1
;
-- 6. Display the top 10 most frequently rented movies in descending order.
select i.film_id, f.title, count(r.rental_id) as renting_frequency
from rental as r
left join inventory as i on r.inventory_id =  i.inventory_id
left join film as f on i.film_id = f.film_id
group by i.film_id, f.title
order by renting_frequency
desc
limit 10
;
-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
select f.title, i.store_id, count(i.inventory_id) as available_copies
from film as f
left join inventory as i on f.film_id = i.film_id
where f.title = 'ACADEMY DINOSAUR'
group by i.store_id, f.title
;

-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory.
-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."

select  f.film_id, f.title , 
case
when count(i.inventory_id) = 0 then 'NOT available'
else 'Available'
end as availability_status
from film as f
left join inventory as i on f.film_id = i.film_id
group by f.film_id
;

-- Question: I dont know how to do it using CASE statement combined with IFNULL.
-- But I check for count(i.inventory_id) after group by film_id, and see that for films with inventory_id value as null after left join, count(i.inventory_id) will be 0
-- Therefore I used the above code.
-- But I am really curious to know how to do this question using CASE and IFNULL as in suggestion!!!!

-- code to retrieve the same result without using join (but use subquery)  
select film_id, title, 
case
when (film_id not in (select distinct film_id from inventory)) = 0 then "available"
else "not available"
end as avaiable_status
from film;
